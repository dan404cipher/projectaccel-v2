import { useState } from "react";
import { Checkbox } from "../ui/checkbox";
import { render } from "react-dom";


export const CustomTable: React.FC<{ draggable?: boolean; selectable?: boolean,data:any[],columns:any[],className?:string }> = ({ draggable, selectable,data,columns,className }) => {
    const [checkbox, setCheckbox] = useState(false)
    return (
        <div className="border border-gray-200 rounded-lg min-w-0">
            <table className={`w-full text-sm ${className}`}>
            <thead className="bg-[#EEF1F2]">
                <tr>
                    {draggable && (
                        <th className="min-h-[10px] min-w-[10px]">
                        </th>
                    )}
                    {selectable && (
                        <th className="pt-4 pl-3 pr-3 pb-1 w-[40px] flex items-center">
                            <Checkbox
                                checked={checkbox}
                                onClick={() => setCheckbox(!checkbox)}
                            />
                        </th>
                    )}
                    {columns.map((col, idx) => (
                        <th
                            key={idx}
                            className="p-3 text-left font-semibold text-gray-900"
                        >
                            <div className="flex gap-2">
                                {col.header}
                                {col.sortable && <span ><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none">
                                    <path d="M16.2902 14.2899L12.0002 18.5899L7.71019 14.2899C7.52188 14.1016 7.26649 13.9958 7.00019 13.9958C6.73388 13.9958 6.47849 14.1016 6.29019 14.2899C6.10188 14.4782 5.99609 14.7336 5.99609 14.9999C5.99609 15.2662 6.10188 15.5216 6.29019 15.7099L11.2902 20.7099C11.3831 20.8037 11.4937 20.8781 11.6156 20.9288C11.7375 20.9796 11.8682 21.0057 12.0002 21.0057C12.1322 21.0057 12.2629 20.9796 12.3848 20.9288C12.5066 20.8781 12.6172 20.8037 12.7102 20.7099L17.7102 15.7099C17.8034 15.6167 17.8774 15.506 17.9278 15.3842C17.9783 15.2624 18.0043 15.1318 18.0043 14.9999C18.0043 14.8681 17.9783 14.7375 17.9278 14.6157C17.8774 14.4939 17.8034 14.3832 17.7102 14.2899C17.6169 14.1967 17.5063 14.1227 17.3844 14.0723C17.2626 14.0218 17.132 13.9958 17.0002 13.9958C16.8683 13.9958 16.7378 14.0218 16.6159 14.0723C16.4941 14.1227 16.3834 14.1967 16.2902 14.2899ZM7.71019 9.70994L12.0002 5.40994L16.2902 9.70994C16.3831 9.80367 16.4937 9.87806 16.6156 9.92883C16.7375 9.9796 16.8682 10.0057 17.0002 10.0057C17.1322 10.0057 17.2629 9.9796 17.3848 9.92883C17.5066 9.87806 17.6172 9.80367 17.7102 9.70994C17.8039 9.61698 17.8783 9.50637 17.9291 9.38452C17.9798 9.26266 18.006 9.13195 18.006 8.99994C18.006 8.86793 17.9798 8.73722 17.9291 8.61536C17.8783 8.4935 17.8039 8.3829 17.7102 8.28994L12.7102 3.28994C12.6172 3.19621 12.5066 3.12182 12.3848 3.07105C12.2629 3.02028 12.1322 2.99414 12.0002 2.99414C11.8682 2.99414 11.7375 3.02028 11.6156 3.07105C11.4937 3.12182 11.3831 3.19621 11.2902 3.28994L6.29019 8.28994C6.19695 8.38318 6.12299 8.49387 6.07253 8.61569C6.02207 8.73751 5.99609 8.86808 5.99609 8.99994C5.99609 9.26624 6.10188 9.52164 6.29019 9.70994C6.47849 9.89824 6.73388 10.004 7.00019 10.004C7.26649 10.004 7.52188 9.89824 7.71019 9.70994Z" fill="black" />
                                </svg>
                                </span>}
                            </div>
                        </th>
                    ))}
                </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
                {data.map((row, rowIndex) => (
                    <tr
                        key={rowIndex}
                        draggable
                        className="hover:bg-gray-50 transition-colors duration-150">
                        {
                            draggable && (
                                <td className="pl-5 w-[40px]">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                        <path d="M7.5 6C7.5 5.79 7.5 5.6865 7.512 5.5995C7.55018 5.32456 7.67704 5.0696 7.87332 4.87332C8.0696 4.67704 8.32456 4.55018 8.5995 4.512C8.685 4.5 8.79 4.5 9 4.5C9.21 4.5 9.3135 4.5 9.4005 4.512C9.67544 4.55018 9.9304 4.67704 10.1267 4.87332C10.323 5.0696 10.4498 5.32456 10.488 5.5995C10.5 5.685 10.5 5.79 10.5 6C10.5 6.21 10.5 6.3135 10.488 6.4005C10.4498 6.67544 10.323 6.9304 10.1267 7.12668C9.9304 7.32296 9.67544 7.44982 9.4005 7.488C9.315 7.5 9.21 7.5 9 7.5C8.79 7.5 8.6865 7.5 8.5995 7.488C8.32456 7.44982 8.0696 7.32296 7.87332 7.12668C7.67704 6.9304 7.55018 6.67544 7.512 6.4005C7.5 6.315 7.5 6.21 7.5 6ZM7.5 12C7.5 11.79 7.5 11.6865 7.512 11.5995C7.55018 11.3246 7.67704 11.0696 7.87332 10.8733C8.0696 10.677 8.32456 10.5502 8.5995 10.512C8.685 10.5 8.79 10.5 9 10.5C9.21 10.5 9.3135 10.5 9.4005 10.512C9.67544 10.5502 9.9304 10.677 10.1267 10.8733C10.323 11.0696 10.4498 11.3246 10.488 11.5995C10.5 11.685 10.5 11.79 10.5 12C10.5 12.21 10.5 12.3135 10.488 12.4005C10.4498 12.6754 10.323 12.9304 10.1267 13.1267C9.9304 13.323 9.67544 13.4498 9.4005 13.488C9.315 13.5 9.21 13.5 9 13.5C8.79 13.5 8.6865 13.5 8.5995 13.488C8.32456 13.4498 8.0696 13.323 7.87332 13.1267C7.67704 12.9304 7.55018 12.6754 7.512 12.4005C7.5 12.315 7.5 12.21 7.5 12ZM7.5 18C7.5 17.7915 7.5 17.6865 7.512 17.5995C7.5504 17.3251 7.67718 17.0706 7.87314 16.8746C8.06909 16.6787 8.32355 16.5519 8.598 16.5135C8.6865 16.5015 8.79 16.5015 8.9985 16.5015C9.207 16.5015 9.3135 16.5015 9.399 16.5135C9.67345 16.5519 9.92791 16.6787 10.1239 16.8746C10.3198 17.0706 10.4466 17.3251 10.485 17.5995C10.497 17.6865 10.497 17.7915 10.497 18C10.497 18.2085 10.497 18.3135 10.485 18.4005C10.4466 18.6749 10.3198 18.9294 10.1239 19.1254C9.92791 19.3213 9.67345 19.4481 9.399 19.4865C9.312 19.4985 9.207 19.4985 8.9985 19.4985C8.79 19.4985 8.685 19.4985 8.598 19.4865C8.32355 19.4481 8.06909 19.3213 7.87314 19.1254C7.67718 18.9294 7.5504 18.6749 7.512 18.4005C7.5 18.3135 7.5 18.2085 7.5 18ZM13.5 6C13.5 5.79 13.5 5.6865 13.512 5.5995C13.5502 5.32456 13.677 5.0696 13.8733 4.87332C14.0696 4.67704 14.3246 4.55018 14.5995 4.512C14.685 4.5 14.79 4.5 15 4.5C15.21 4.5 15.3135 4.5 15.4005 4.512C15.6754 4.55018 15.9304 4.67704 16.1267 4.87332C16.323 5.0696 16.4498 5.32456 16.488 5.5995C16.5 5.685 16.5 5.79 16.5 6C16.5 6.21 16.5 6.3135 16.488 6.4005C16.4498 6.67544 16.323 6.9304 16.1267 7.12668C15.9304 7.32296 15.6754 7.44982 15.4005 7.488C15.315 7.5 15.21 7.5 15 7.5C14.79 7.5 14.6865 7.5 14.5995 7.488C14.3246 7.44982 14.0696 7.32296 13.8733 7.12668C13.677 6.9304 13.5502 6.67544 13.512 6.4005C13.5 6.315 13.5 6.21 13.5 6ZM13.5 12C13.5 11.79 13.5 11.6865 13.512 11.5995C13.5502 11.3246 13.677 11.0696 13.8733 10.8733C14.0696 10.677 14.3246 10.5502 14.5995 10.512C14.685 10.5 14.79 10.5 15 10.5C15.21 10.5 15.3135 10.5 15.4005 10.512C15.6754 10.5502 15.9304 10.677 16.1267 10.8733C16.323 11.0696 16.4498 11.3246 16.488 11.5995C16.5 11.685 16.5 11.79 16.5 12C16.5 12.21 16.5 12.3135 16.488 12.4005C16.4498 12.6754 16.323 12.9304 16.1267 13.1267C15.9304 13.323 15.6754 13.4498 15.4005 13.488C15.315 13.5 15.21 13.5 15 13.5C14.79 13.5 14.6865 13.5 14.5995 13.488C14.3246 13.4498 14.0696 13.323 13.8733 13.1267C13.677 12.9304 13.5502 12.6754 13.512 12.4005C13.5 12.315 13.5 12.21 13.5 12ZM13.5 18C13.5 17.7915 13.5 17.6865 13.512 17.5995C13.5504 17.3251 13.6772 17.0706 13.8731 16.8746C14.0691 16.6787 14.3236 16.5519 14.598 16.5135C14.6865 16.5015 14.79 16.5015 14.9985 16.5015C15.2085 16.5015 15.3135 16.5015 15.399 16.5135C15.6734 16.5519 15.9279 16.6787 16.1239 16.8746C16.3198 17.0706 16.4466 17.3251 16.485 17.5995C16.497 17.6865 16.497 17.7915 16.497 18C16.497 18.2085 16.497 18.3135 16.485 18.4005C16.4466 18.6749 16.3198 18.9294 16.1239 19.1254C15.9279 19.3213 15.6734 19.4481 15.399 19.4865C15.312 19.4985 15.207 19.4985 14.9985 19.4985C14.79 19.4985 14.685 19.4985 14.598 19.4865C14.3236 19.4481 14.0691 19.3213 13.8731 19.1254C13.6772 18.9294 13.5504 18.6749 13.512 18.4005C13.5 18.3135 13.5 18.2085 13.5 18Z" fill="#C0CED2" />
                                    </svg>
                                </td>
                            )
                        }
                        {
                            selectable && (
                                <td className="p-3 w-[40px] flex items-center justify-center" >
                                    <Checkbox
                                        checked={checkbox}
                                        onClick={() => setCheckbox(!checkbox)}
                                    />
                                </td>
                            )
                        }
                        {columns.map((col, colIndex) => (
                            <td key={colIndex} className="p-3">
                                {col.render ? col.render(row[col.accessor], row) : row[col.accessor]}
                            </td>
                        ))}
                    </tr>
                ))}
            </tbody>
        </table>
        </div>
    )
}