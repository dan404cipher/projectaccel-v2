import mongoose, { Schema } from 'mongoose';
import { IWorkspace, IWorkspaceSettings, IWorkspaceMember } from '@/types';
import { IWorkspaceModel } from '@/types/models';
import Counter from './Counter';

/**
 * Workspace Member schema
 */
const workspaceMemberSchema = new Schema<IWorkspaceMember>(
  {
    userId: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true,
    },
    roleId: {
      type: Schema.Types.ObjectId,
      ref: 'Role',
      required: true,
    },
    joinedAt: {
      type: Date,
      default: Date.now,
    },
    invitedBy: {
      type: Schema.Types.ObjectId,
      ref: 'User',
    },
    status: {
      type: String,
      enum: ['active', 'invited', 'suspended'],
      default: 'active',
    },
  },
  { _id: false }
);

/**
 * Workspace Settings schema
 */
const workspaceSettingsSchema = new Schema<IWorkspaceSettings>(
  {
    allowPublicInvites: {
      type: Boolean,
      default: false,
    },
    requireAdminApproval: {
      type: Boolean,
      default: true,
    },
    defaultRole: {
      type: Schema.Types.ObjectId,
      ref: 'Role',
    },
    timezone: {
      type: String,
      default: 'UTC',
    },
    language: {
      type: String,
      default: 'en',
    },
    empIdPrefix: {
      type: String,
      default: null, // Will be set to first 2 letters of workspace name
      match: /^[A-Z]{2}$/, // Exactly 2 uppercase letters
    },
    empIdCounter: {
      type: Number,
      default: 1000, // Start from 1000
      min: 1000,
    },
  },
  { _id: false }
);

/**
 * Workspace schema for multi-tenant SaaS structure
 */
const workspaceSchema = new Schema<IWorkspace>(
  {
    name: {
      type: String,
      required: true,
      trim: true,
      maxlength: 100,
    },
    workspaceId: {
      type: String,
      unique: true,
      required: false, // Will be generated by pre-save middleware
      match: /^WS\d{4}$/,
    },
    description: {
      type: String,
      trim: true,
      maxlength: 500,
    },
    ownerId: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true,
      index: true,
    },
    isActive: {
      type: Boolean,
      default: true,
      index: true,
    },
    subscriptionPlan: {
      type: String,
      enum: ['free', 'pro', 'enterprise'],
      default: 'free',
      index: true,
    },
    settings: {
      type: workspaceSettingsSchema,
      default: () => ({}),
    },
    members: [workspaceMemberSchema],
  },
  {
    timestamps: true,
    collection: 'workspaces',
  }
);

// Indexes for efficient querying
workspaceSchema.index({ ownerId: 1 });
workspaceSchema.index({ 'members.userId': 1 });
workspaceSchema.index({ isActive: 1, subscriptionPlan: 1 });

// Pre-save middleware to generate workspace ID and empId prefix
workspaceSchema.pre('save', async function (next) {
  if (this.isNew && !this.workspaceId) {
    try {
      this.workspaceId = await Counter.generateWorkspaceId();
    } catch (error) {
      return next(error as Error);
    }
  }
  
  // Set empIdPrefix if not already set
  if (!this.settings.empIdPrefix) {
    // Extract first 2 letters from workspace name, convert to uppercase
    const prefix = this.name
      .replace(/[^a-zA-Z]/g, '') // Remove non-alphabetic characters
      .substring(0, 2)
      .toUpperCase();
    
    if (prefix.length === 2) {
      this.settings.empIdPrefix = prefix;
    } else {
      // Fallback to 'WS' if name doesn't have enough letters
      this.settings.empIdPrefix = 'WS';
    }
  }
  
  next();
});

// Static method to find workspace by workspace ID
workspaceSchema.statics.findByWorkspaceId = function (workspaceId: string) {
  return this.findOne({ workspaceId, isActive: true });
};

// Instance method to add member
workspaceSchema.methods.addMember = function (
  userId: mongoose.Types.ObjectId,
  roleId: mongoose.Types.ObjectId,
  invitedBy?: mongoose.Types.ObjectId
) {
  // Check if user is already a member
  const existingMember = this.members.find(
    (member: IWorkspaceMember) => member.userId.toString() === userId.toString()
  );

  if (existingMember) {
    throw new Error('User is already a member of this workspace');
  }

  this.members.push({
    userId,
    roleId,
    joinedAt: new Date(),
    invitedBy,
    status: 'active',
  });

  return this.save();
};

// Instance method to remove member
workspaceSchema.methods.removeMember = function (
  userId: mongoose.Types.ObjectId
) {
  this.members = this.members.filter(
    (member: IWorkspaceMember) => member.userId.toString() !== userId.toString()
  );
  return this.save();
};

// Instance method to update member role
workspaceSchema.methods.updateMemberRole = function (
  userId: mongoose.Types.ObjectId,
  newRoleId: mongoose.Types.ObjectId
) {
  const member = this.members.find(
    (member: IWorkspaceMember) => member.userId.toString() === userId.toString()
  );

  if (!member) {
    throw new Error('User is not a member of this workspace');
  }

  member.roleId = newRoleId;
  return this.save();
};

// Instance method to get member by user ID
workspaceSchema.methods.getMember = function (
  userId: mongoose.Types.ObjectId
): IWorkspaceMember | undefined {
  return this.members.find(
    (member: IWorkspaceMember) => member.userId.toString() === userId.toString()
  );
};

// Instance method to check if user is member
workspaceSchema.methods.isMember = function (
  userId: mongoose.Types.ObjectId
): boolean {
  return this.members.some(
    (member: IWorkspaceMember) =>
      member.userId.toString() === userId.toString() &&
      member.status === 'active'
  );
};

// Instance method to check if user is owner
workspaceSchema.methods.isOwner = function (
  userId: mongoose.Types.ObjectId
): boolean {
  return this.ownerId.toString() === userId.toString();
};

// Instance method to transfer ownership
workspaceSchema.methods.transferOwnership = function (
  newOwnerId: mongoose.Types.ObjectId
) {
  // Check if new owner is a member
  if (!this.isMember(newOwnerId)) {
    throw new Error('New owner must be a member of the workspace');
  }

  this.ownerId = newOwnerId;
  return this.save();
};

// Instance method to get active members count
workspaceSchema.methods.getActiveMembersCount = function (): number {
  return this.members.filter(
    (member: IWorkspaceMember) => member.status === 'active'
  ).length;
};

// Instance method to get members by status
workspaceSchema.methods.getMembersByStatus = function (
  status: 'active' | 'invited' | 'suspended'
): IWorkspaceMember[] {
  return this.members.filter(
    (member: IWorkspaceMember) => member.status === status
  );
};

const Workspace = mongoose.model<IWorkspace, IWorkspaceModel>(
  'Workspace',
  workspaceSchema
);

export default Workspace;
